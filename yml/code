# Title and description of the project
title: "NER Citations of ECFR Banking Regulation in a spaCy pipeline."
description: "Custom NER project for spaCy v3 adapted from the spaCy v3 [`ner_demo`](https://github.com/explosion/projects/tree/9d5fce5f95ddf5f35c3370b2074b25e995525f51/pipelines/ner_demo) example script for creating an NER component in a new pipeline."

commands:
  - name: "execute-first-step-format-script"
    help: |
      Execute the Python script `firstStep-format.py`, which performs the initial formatting of a dataset file for the first step of the project. This script extracts text and labels from a dataset file in JSONL format and writes them to a new JSONL file in a specific format.
      
      Usage:
      ```
      spacy project run execute-first-step-format-script
      ```

      Explanation:
      - The script `firstStep-format.py` reads data from the file specified in the `dataset_file` variable (`data/train200.jsonl` by default).
      - It extracts text and labels from each JSON object in the dataset file.
      - If both text and at least one label are available, it writes a new JSON object to the output file specified in the `output_file` variable (`data/firstStep_file.jsonl` by default) with the extracted text and label.
      - If either text or label is missing in a JSON object, a warning message is printed.
      - Upon completion, the script prints a message confirming the processing and the path to the output file.
    script:
      - "python3 python_Code/firstStep-format.py"

  - name: "train-text-classification-model"
    help: |
      Train the text classification model for the second step of the project using the `secondStep-score.py` script. This script loads a blank English spaCy model and adds a text classification pipeline to it. It then trains the model using the processed data from the first step.
      
      Usage:
      ```
      spacy project run train-text-classification-model
      ```

      Explanation:
      - The script `secondStep-score.py` loads a blank English spaCy model and adds a text classification pipeline to it.
      - It reads processed data from the file specified in the `processed_data_file` variable (`data/firstStep_file.jsonl` by default).
      - The processed data is converted to spaCy format for training the model.
      - The model is trained using the converted data for a specified number of iterations (`n_iter`).
      - Losses are printed for each iteration during training.
      - Upon completion, the trained model is saved to the specified output directory (`./my_trained_model` by default).
    script:
      - "python3 python_Code/secondStep-score.py"

  - name: "classify-unlabeled-data"
    help: |
      Classify the unlabeled data for the third step of the project using the `thirdStep-label.py` script. This script loads the trained spaCy model from the previous step and classifies each record in the unlabeled dataset.
      
      Usage:
      ```
      spacy project run classify-unlabeled-data
      ```

      Explanation:
      - The script `thirdStep-label.py` loads the trained spaCy model from the specified model directory (`./my_trained_model` by default).
      - It reads the unlabeled data from the file specified in the `unlabeled_data_file` variable (`data/train.jsonl` by default).
      - Each record in the unlabeled data is classified using the loaded model.
      - The predicted labels for each record are extracted and stored along with the text.
      - The classified data is optionally saved to a file specified in the `output_file` variable (`data/thirdStep_file.jsonl` by default).
    script:
      - "python3 python_Code/thirdStep-label.py"

  - name: "format-labeled-data"
    help: |
      Format the labeled data for the final step of the project using the `finalStep-formatLabel.py` script. This script processes the classified data from the third step and transforms it into a specific format, considering a threshold for label acceptance.
      
      Usage:
      ```
      spacy project run format-labeled-data
      ```

      Explanation:
      - The script `finalStep-formatLabel.py` reads classified data from the file specified in the `input_file` variable (`data/thirdStep_file.jsonl` by default).
      - For each record, it determines accepted categories based on a specified threshold.
      - It constructs an output record containing the text, predicted labels, accepted categories, answer (accept/reject), and options with meta information.
      - The transformed data is written to the file specified in the `output_file` variable (`data/train4465.jsonl` by default).
    script:
      - "python3 python_Code/finalStep-formatLabel.py"
